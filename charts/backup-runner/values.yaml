---
enabled: true
maxruntime: 300
envVars:
  - name: POSTGRESQL_USER
    value: "sso"
  - name: POSTGRESQL_DATABASE
    value: "sso"
  - name: POSTGRESQL_SVC_HOSTNAME
    value: "sso-postgresql"
  - name: PGPASSWORD
    value: "123456"
  - name: BACKUP_NAME
    value: "keycloak-db"
  - name: STORAGE_CONN_STR
    valueFrom:
      secretKeyRef:
        name: backup-encryption
        key: connection_string
  - name: STORAGE_CONTAINER_NAME
    valueFrom:
      secretKeyRef:
        name: backup-encryption
        key: container_name
  - name: ENCRYPT_PASSWORD
    valueFrom:
      secretKeyRef:
       name: backup-encryption
       key: password

resources:
  request:
    cpu: 100m
    memory: 50Mi
  limits:
    cpu: "1"
    memory: 512Mi
schedule: '0 3 * * *'

buildconfig:
  source:
    contextDir: "charts/backup-runner/container_build"
    git:
      uri: "https://github.com/WHOAcademy/helm-charts.git"  
      ref: master
    type: Git
  strategy:
    type: docker
    dockerStrategy: {}

# To enable sealed secrets follow the instructions in UJ / docs / sealed-secrets.md
sealed_secrets:
  - name: backup-encryption
    encryptedData:
      password: AgArim/f1O22yHAmJCap2KaHPMzjH3CxjcmeLZNeZ0yAn4vovCIBHjBqF9mMJz2zlpO60IODh7aQX4FD2vMDkFsFLxBdL0eWHfoDHZQuT1T8bYxyuocAkIX3G2KWaNfV7qpmG3tVELX3Fkqyemecof9jZ+rb2gDfMbNSTo4faaOR9E4KJPH9pBaOrc82n+rVWYCUBem1LghlpC9mAKuty72lc5gobWPrishlndZbAwc0pQ3ASM0WeHhxmBYC5330mGBvHU5Zv/cGRtP7LwVMIEkSkIDLvvUUG1iZf+qQEykGldPv4+Sx2PFuLPY0TUV8WB8nZC6+yFwCUHI8n1c4wUWTYgaG7H3ZoQifpknIQteMc64g1An/GdRmjEYHIrL3/fj/j2WTEn3E3erzzyUcvz9+/Iso/x5daIg0wq34p3yjbmcmnGgq6Qbk8Ly90Oe33GqON+xndZUpP+w3eOXeqtsRUwqlLOyjH8IzKy4beUGEhKWW5/EJDKM+fsbBh8FTYNmeauMsbK5DdhclQxLmp66nO5bgQirUOAw+noda0NPT6XzUlmnzw+LwUIQRherWyN1lY8WB1sS6jy3HYfuvIlwQQ31MHg/fJG0WmHlmp7VxJKpY4A5Gjt1Pfxt0FFctWeu5cF9/B6dUMO2n0U/j2skWcWVR1uz6JDDsr8npdlTOTwu0KBw3vnQxHnGSY+tFaU3NuxrjlYc3PrIvHxX7jnwSLIScMg==
      connection_string: AgBYjaPa2YUwJc0PRM0zIzDatOE4DTHEQLhSLtVl0AsRE7A8Pillf4p+Gmulpa6KtsSjLD+8JSSplA47XquexVQPh2Tuc/sqGsVJO5mxuXdRtxR8am9xZELtgOSxFIIU4+iq8Kpp+rdFEqutW84zfvzo1q4n/FSguM4jKSL+UYlqSQSwdgRaeHLQg3J1lnpyg0B99XaFDwt1YqBmp4t4j43gODGaAopIVWzTkF1wqkLjZO0DRR27174Y/2p7+ysSWYdinGfx+wVCJumcGuMdvHOI60DICmbJsduOA0lsrYPddDdfziE4uuCwTyEXfjYI0EF+llAjWVsG0QE+258JpBYgLSmDgiHR1Z34A265eXT5+eBXLkkkUZzgtm+KaDQ2hB7RNDk0LDh0XqHJUErcVO8wv8MU5x7f6QBmaYZxNCM6/54rrcMtIchtX5ejQbLZ8lhzFxRmPpnMqDIaf7UFDZVmqRKJSfQ6naOQEc+HwVIQ0yC8CSbmJF6XjCxCArV9jIjokKXiK0xL1x3esX+8HZpt/Fi6+6q+XLBy6BfQE5fxmSA/VP+pR4H7m5uaXIRvktJmgB7YS2LguW+Xv6pP1iC82RV/sxlJrGaUygYm0CEXfTxi34yLdgn9sFfH6BujDaNKU4onplz9YwXMu5AAO4nzTDuKnG/o2gYbMstLi4xg+W7+92uSqAa6Upt5EN6jBMoDMGUtHQlN+yeGpOgb1D/x3h8dMVc1wcp+cDEXjhkCJriJsD38bOE/OoXftLoQYw8H4+O+F59cUNJYCymKQbmxbN+aUgsNRdVdYVgmz5z5CARUO8hA02eBlSqD513M6knXQw25tlIZfRU8xl33hcdezwqOFrQPR68OZMqz6y3qhAlLOEkg7rId2Izr6jlCO8jVFV5OSiJqj2beK8jbCYpWM4McJde7Fqw2oRizRzhPRlknPGzfhX8n5TQ=
      container_name: AgCEP3QM4yvPlfN1Zb1iWDBifz/5hm8vEkHU/vKXDiFf9DJxlAN9v/NS/3fbX1lIXb/vMhr8rdzYfDMiaege5g2N9ao9LPYGLo26+w4uw13uxHCqufG5UXK6uB64Jgx9gSNI+y9NZ0PX6vKv/uqW1AwP1K3j5R4g7tHPYHgM0LfAq7PqIqf5S/MjDn7KMBXBiq7iiHykWpPY2hAv/R1O9250u/U+1AUdz/bjXxS8RWdHjXMJ1596ZjXdFJFiDwt40LPpk7CHlHNY3Qn/EI6DqMnwfisGq4LXwfSmweysWvizuHcoDR64eWn177T3/2q3+HHTZfIxl11EUHxn3YCOQ+0WYaNbBKUQdSaqud0tg+awMymp9YKqeCjfIjMlPI3eAsOTU4R4M21I0qTrqN1p5EuKxmzJ6XSFnzEuYuXENXcU98QXlwNMSOVGHPxJ1dpUCwke80G7OXCttCm0ZL6Qns9b/e3ey5anLm6/+LK/2Ojt69hO/hi46XMg4oyWvKp1216Ypi9ptGPiv5z758wCJB++OMR5i4VDAO0I0K7pwM1VnsEm7AuAVUx6U2SgpFW5rAk8ni0DnDnbqrWeTlDGoCN9qyy9pJFkpi3DLG2WSn67maK/5ZDc+bRYJCZm16GNG6+XTYNjiwe3ol4qNF2/XU1AjXGwoo5exxbVWzVXfozOWanfs88YuYIWqdW4Z77FfJSVOpcOLM+cmcXPRD2hUCx5v0XU
  - name: another-secret
    encryptedData:
      foo: AgCtpVPB4csDoLixzRK0XoJZtHJ+o3GV9907A2V2SkURYL8ZOdx1IH0kKLUOZI+HF79zV7/E9fZNpD/ioff8eaUI8B91uesG904zVJcGQFXYp6PWSCvWYx3D+S0i2RLOxPYjNpDg5hkmNKDKeLYWriHKfaWOcb7Oz9/03aju2eF+4vtcZyC2zw/b+ejBTcZefcbtYFJW8xxJpf1zVRb1rvy++Wv8nbW3Fmc8E1Ewjzl/082DqbuFpOmW+f0CV3RH3xSVtR/SS0TjAs94yCX9uAmp69LXjuNlPmmcr/Ldw4+gKSjkiZZvKqxwv8l4R/o0Zp1Kb4dAHPYtG4PZgis1HS26rkIMCAShyAluAnpxv48cnyXjfcwAguTswFZ5gdd/XxOB8n+ZVCC3DHTUlAcWujrX20UEeI4Kr10DNAg1XlojLaOQvrx074kxhY/6IL8H2woovv6Z4AbNhfnMcEQLFF4hW7lH1zOqZZkbEL3OUDrm1u2PGgvV2hmFZEvUg3O6lK4XQNvSkO0BK3j4PSVk/EVkVagCzzD1YKiSd29vuBgNjf3Ot5PHD/onvwahgK78bnp3CzOQ3Y3NwDi182Cyq4HmK4RShRlIZKsJjmKWhqjj9qxi1HLdhXROV7Ec67a7CbEmPNhjALYsvZ2TGaGjCEaWPwaMWU4DUcbbBcj4e6gXg2GqAhDdV0h4gWUqCwyANFBDXSM=
scripts:
  backup.sh: |
    #!/bin/bash
    set -e
    DATESTAMP=$(date +%d-%m-%Y)

    pg_dump -U $POSTGRESQL_USER -d $POSTGRESQL_DATABASE -h $POSTGRESQL_SVC_HOSTNAME > /tmp/${BACKUP_NAME}.sql

    gzip -N -9 /tmp/${BACKUP_NAME}.sql

    7za a /tmp/${BACKUP_NAME}_${DATESTAMP}.sql.gz.7z /tmp/${BACKUP_NAME}.sql.gz -p"${ENCRYPT_PASSWORD}" 

    export SOURCE_FILE="/tmp/${BACKUP_NAME}_${DATESTAMP}.sql.gz.7z"

    python /opt/backup/upload-blob.py
  create-container.py: |
    import os

    from azure.storage.blob import ContainerClient


    container_client = ContainerClient.from_connection_string(conn_str=os.getenv('STORAGE_CONN_STR'),
                                                              container_name=os.getenv('STORAGE_CONTAINER_NAME'))

    container_client.create_container()
  upload-blob.py: |
    import os

    from azure.storage.blob import BlobClient

    source_file=os.getenv('SOURCE_FILE')
    blob = BlobClient.from_connection_string(conn_str=os.getenv('STORAGE_CONN_STR'),
                                             container_name=os.getenv('STORAGE_CONTAINER_NAME'),
                                             blob_name=source_file)

    with open(source_file, "rb") as data:
        blob.upload_blob(data)
