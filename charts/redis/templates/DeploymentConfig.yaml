{{- if eq .Values.enabled true -}}
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  annotations:
    template.alpha.openshift.io/wait-for-ready: "true"
  labels:
    {{- include "redis.labels" . | nindent 4 }}
  name: {{ include "redis.fullname" . }}
spec:
  replicas: 1
  selector:
    {{- include "redis.selectorLabels" . | nindent 4 }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        {{- include "redis.selectorLabels" . | nindent 8 }}
    spec:
      containers:
      - env:
      {{- if .Values.sealed_secrets.enabled }}
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redis_password
              name: "{{ .Values.sealed_secrets.sealed_secret_name }}-incluster-secret"
      {{- else }}
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: {{ template "redis.name" . }}
      {{- end }}
        image: ' '
        imagePullPolicy: IfNotPresent
        livenessProbe:
          initialDelaySeconds: 30
          tcpSocket:
            port: {{ .Values.service.port | default "6379" }}
          timeoutSeconds: 1
        name: redis
        ports:
        - containerPort: {{ .Values.service.port | default "6379" }}
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -i
            - -c
            - test "$(redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD ping)" == "PONG"
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources:
          limits:
            memory: {{ .Values.memory_limit }}
        securityContext:
          capabilities: {}
          privileged: false
        terminationMessagePath: /dev/termination-log
        volumeMounts:
        - mountPath: /var/lib/redis/data
          name: {{ template "redis.fullname" . }}-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      volumes:
      - name: {{ template "redis.fullname" . }}-data
        persistentVolumeClaim:
          claimName: {{ template "redis.fullname" . }}
  triggers:
  - imageChangeParams:
      automatic: true
      containerNames:
      - redis
      from:
        kind: ImageStreamTag
        name: redis:{{ .Values.redis_version }}
        namespace: {{ .Values.is_namespace }}
      lastTriggeredImage: ""
    type: ImageChange
  - type: ConfigChange
{{- end }}
